// BDGAD Backend Database Schema
// Generated from TypeORM entities

Project bdgad_backend {
  database_type: 'PostgreSQL'
  Note: 'BDGAD Backend Database Schema for Laboratory Information Management System'
}

// Core User Management Tables
Table users {
  id integer [primary key, increment]
  email varchar [unique, not null]
  password varchar [not null]
  name varchar [not null]
  status varchar [default: 'active']
  metadata jsonb [default: '{}']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  deleted_at timestamp [null]

  Note: 'Core user table for all system users'
}

Table roles {
  id integer [primary key, increment]
  name varchar [not null]
  description varchar [not null]
  code varchar [not null]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  Note: 'Role definitions for RBAC system'
}

Table user_roles {
  user_id integer [ref: > users.id, not null]
  role_id integer [ref: > roles.id, not null]

  indexes {
    (user_id, role_id) [pk]
  }

  Note: 'Many-to-many relationship between users and roles'
}

Table password_reset_tokens {
  id integer [primary key, increment]
  token varchar [not null]
  expires_at timestamp [not null]
  used varchar(10) [default: 'false']
  created_at timestamp [not null, default: `now()`]
  user_id integer [ref: > users.id, not null]

  Note: 'Password reset tokens for user authentication'
}

Table system_admins {
  id integer [primary key, increment]
  email varchar [unique, not null]
  password varchar [not null]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  Note: 'System administrators separate from regular users'
}

// Patient and Lab Session Management
Table patients {
  id integer [primary key, increment]
  full_name varchar [not null]
  date_of_birth date [null]
  phone varchar [null]
  ethnicity varchar [null]
  marital_status varchar [null]
  address1 varchar [null]
  address2 varchar [null]
  gender varchar [null]
  nation varchar [null]
  work_address varchar [null]
  citizen_id varchar [unique, not null]
  barcode varchar [unique, not null]
  allergies_info jsonb [null]
  medical_record jsonb [null]
  appointment jsonb [null]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  Note: 'Patient information and medical records'
}

Table lab_sessions {
  id integer [primary key, increment]
  patient_id integer [ref: > patients.id, not null]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
  type_lab_session varchar [not null] // enum: 'test', 'result_test'
  finished_at timestamp [null]
  metadata_status boolean [default: false]

  Note: 'Lab testing sessions for patients'
}

Table labcode_lab_sessions {
  id integer [primary key, increment]
  lab_session_id integer [ref: > lab_sessions.id, not null]
  labcode varchar [not null]
  package_type varchar [null]
  sample_type varchar [null]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  Note: 'Individual labcode assignments within lab sessions'
}

// Assignment and Workflow Management
Table assign_lab_sessions {
  id integer [primary key, increment]
  labcode_lab_session_id integer [ref: - labcode_lab_sessions.id, not null]
  doctor_id integer [ref: > users.id, null]
  lab_testing_id integer [ref: > users.id, null]
  request_date_lab_testing timestamp [null]
  analysis_id integer [ref: > users.id, null]
  request_date_analysis timestamp [null]
  validation_id integer [ref: > users.id, null]
  request_date_validation timestamp [null]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]

  Note: 'Assignment of lab sessions to different roles in the workflow'
}

Table assignment_histories {
  id integer [primary key, increment]
  assign_lab_session_id integer [ref: > assign_lab_sessions.id, not null]
  role_type varchar [not null] // enum: 'doctor', 'lab_testing', 'analysis', 'validation'
  old_user_id integer [ref: > users.id, null]
  new_user_id integer [ref: > users.id, null]
  changed_by integer [ref: > users.id, not null]
  created_at timestamp [not null, default: `now()`]

  Note: 'History of assignment changes for audit trail'
}

// File Management
Table patient_files {
  id integer [primary key, increment]
  session_id integer [ref: > lab_sessions.id, not null]
  file_name varchar [not null]
  file_path text [not null]
  file_type varchar [not null]
  file_size integer [null]
  ocr_result jsonb [null]
  uploaded_by integer [ref: > users.id, not null]
  uploaded_at timestamp [not null]
  file_category varchar [default: 'general']
  ocr_confidence decimal(3,2) [null]

  Note: 'Patient files uploaded during lab sessions'
}

Table fastq_files {
  id integer [primary key, increment]
  file_path text [null]
  created_at timestamp [not null, default: `now()`]

  Note: 'FASTQ files for genomic analysis'
}

Table fastq_file_pairs {
  id integer [primary key, increment]
  labcode_lab_session_id integer [ref: > labcode_lab_sessions.id, not null]
  fastq_file_r1_id integer [ref: - fastq_files.id, null]
  fastq_file_r2_id integer [ref: - fastq_files.id, null]
  created_at timestamp [not null, default: `now()`]
  created_by integer [ref: > users.id, not null]
  status varchar [null] // enum: 'uploaded', 'wait_for_approval', 'approved', 'rejected', 'not_uploaded'
  redo_reason varchar [null]
  reject_by integer [ref: > users.id, null]
  approve_by integer [ref: > users.id, null]

  Note: 'Paired FASTQ files (R1 and R2) for genomic sequencing'
}

Table category_general_files {
  id integer [primary key, increment]
  name varchar [unique, not null]
  description text [null]

  Note: 'Categories for general file organization'
}

Table general_files {
  id integer [primary key, increment]
  file_name varchar [not null]
  file_type varchar [null]
  file_size integer [null]
  file_path text [not null]
  description text [not null]
  category_id integer [ref: > category_general_files.id, null]
  uploaded_by integer [ref: > users.id, not null]
  uploaded_at timestamp [not null]
  send_emr_at timestamp [null]

  Note: 'General system files with categorization'
}

// ETL Processing and Results
Table etl_results {
  id integer [primary key, increment]
  labcode_lab_session_id integer [ref: > labcode_lab_sessions.id, not null]
  fastq_file_pair_id integer [ref: > fastq_file_pairs.id, null]
  html_result text [null]
  excel_result text [null]
  start_time timestamp [null]
  etl_completed_at timestamp [null]
  etl_completed_queue_at varchar [null]
  status varchar [null] // enum: 'processing', 'completed', 'failed', 'wait_for_approval', 'rejected', 'approved'
  reason_reject varchar [null]
  reject_by integer [ref: > users.id, null]
  reason_approve varchar [null]
  approve_by integer [ref: > users.id, null]

  Note: 'ETL processing results and workflow status'
}

// Notification System
Table notifications {
  id integer [primary key, increment]
  title varchar [not null]
  message varchar [not null]
  task_type varchar [not null] // enum from TypeTaskNotification
  type varchar [not null] // enum from TypeNotification
  sub_type varchar [not null] // enum from SubTypeNotification
  sender_id integer [ref: > users.id, not null]
  lab_code text[] [null]
  barcode varchar [null]
  receiver_id integer [ref: > users.id, not null]
  is_read boolean [default: false]
  created_at timestamptz [not null, default: `now()`]

  Note: 'System notifications for workflow events'
}

// Enums Documentation
Enum FastqFileStatus {
  uploaded
  wait_for_approval
  approved
  rejected
  not_uploaded
}

Enum EtlResultStatus {
  processing
  completed
  failed
  wait_for_approval
  rejected
  approved
}

Enum LabSessionType {
  test
  result_test
}

Enum AssignmentRoleType {
  doctor
  lab_testing
  analysis
  validation
}

// Relationships Summary
// 1. Users have many-to-many relationship with Roles
// 2. Patients have one-to-many relationship with LabSessions
// 3. LabSessions have one-to-many relationship with LabCodeLabSessions
// 4. LabCodeLabSessions have one-to-one relationship with AssignLabSessions
// 5. LabCodeLabSessions have one-to-many relationship with FastqFilePairs and EtlResults
// 6. FastqFilePairs reference two FastqFiles (R1 and R2)
// 7. EtlResults track the processing pipeline with approval workflow
// 8. All file operations and workflow changes generate Notifications
// 9. Assignment changes are tracked in AssignmentHistories for audit
